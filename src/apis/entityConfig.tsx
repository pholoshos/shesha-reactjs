/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';
import { MetadataSourceType } from '../interfaces/metadata';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
/**
 * Entity config DTO
 */
export interface EntityConfigDto {
  id?: string;
  friendlyName?: string | null;
  typeShortAlias?: string | null;
  tableName?: string | null;
  className?: string | null;
  namespace?: string | null;
  discriminatorValue?: string | null;
  source?: MetadataSourceType | null;
  suppress?: boolean | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface EntityConfigDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: EntityConfigDto;
}

export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface EntityConfigDtoPagedResultDto {
  items?: EntityConfigDto[] | null;
  totalCount?: number;
}

export interface EntityConfigDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: EntityConfigDtoPagedResultDto;
}

export interface EntityConfigGetQueryParams {
  id?: string;
}

export type EntityConfigGetProps = Omit<
  GetProps<EntityConfigDtoAjaxResponse, AjaxResponseBase, EntityConfigGetQueryParams, void>,
  'path'
>;

export const EntityConfigGet = (props: EntityConfigGetProps) => (
  <Get<EntityConfigDtoAjaxResponse, AjaxResponseBase, EntityConfigGetQueryParams, void>
    path={`/api/services/app/EntityConfig/Get`}
    {...props}
  />
);

export type UseEntityConfigGetProps = Omit<
  UseGetProps<EntityConfigDtoAjaxResponse, AjaxResponseBase, EntityConfigGetQueryParams, void>,
  'path'
>;

export const useEntityConfigGet = (props: UseEntityConfigGetProps) =>
  useGet<EntityConfigDtoAjaxResponse, AjaxResponseBase, EntityConfigGetQueryParams, void>(
    `/api/services/app/EntityConfig/Get`,
    props
  );

export type entityConfigGetProps = Omit<
  RestfulShesha.GetProps<EntityConfigDtoAjaxResponse, AjaxResponseBase, EntityConfigGetQueryParams, void>,
  'queryParams'
>;
export const entityConfigGet = (queryParams: EntityConfigGetQueryParams, props: entityConfigGetProps) =>
  RestfulShesha.get<EntityConfigDtoAjaxResponse, AjaxResponseBase, EntityConfigGetQueryParams, void>(
    `/api/services/app/EntityConfig/Get`,
    queryParams,
    props
  );

export interface EntityConfigGetAllQueryParams {
  sorting?: string | null;
  skipCount?: number;
  maxResultCount?: number;
}

export type EntityConfigGetAllProps = Omit<
  GetProps<EntityConfigDtoPagedResultDtoAjaxResponse, AjaxResponseBase, EntityConfigGetAllQueryParams, void>,
  'path'
>;

export const EntityConfigGetAll = (props: EntityConfigGetAllProps) => (
  <Get<EntityConfigDtoPagedResultDtoAjaxResponse, AjaxResponseBase, EntityConfigGetAllQueryParams, void>
    path={`/api/services/app/EntityConfig/GetAll`}
    {...props}
  />
);

export type UseEntityConfigGetAllProps = Omit<
  UseGetProps<EntityConfigDtoPagedResultDtoAjaxResponse, AjaxResponseBase, EntityConfigGetAllQueryParams, void>,
  'path'
>;

export const useEntityConfigGetAll = (props: UseEntityConfigGetAllProps) =>
  useGet<EntityConfigDtoPagedResultDtoAjaxResponse, AjaxResponseBase, EntityConfigGetAllQueryParams, void>(
    `/api/services/app/EntityConfig/GetAll`,
    props
  );

export type entityConfigGetAllProps = Omit<
  RestfulShesha.GetProps<
    EntityConfigDtoPagedResultDtoAjaxResponse,
    AjaxResponseBase,
    EntityConfigGetAllQueryParams,
    void
  >,
  'queryParams'
>;
export const entityConfigGetAll = (queryParams: EntityConfigGetAllQueryParams, props: entityConfigGetAllProps) =>
  RestfulShesha.get<EntityConfigDtoPagedResultDtoAjaxResponse, AjaxResponseBase, EntityConfigGetAllQueryParams, void>(
    `/api/services/app/EntityConfig/GetAll`,
    queryParams,
    props
  );

export type EntityConfigCreateProps = Omit<
  MutateProps<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>,
  'path' | 'verb'
>;

export const EntityConfigCreate = (props: EntityConfigCreateProps) => (
  <Mutate<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>
    verb="POST"
    path={`/api/services/app/EntityConfig/Create`}
    {...props}
  />
);

export type UseEntityConfigCreateProps = Omit<
  UseMutateProps<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>,
  'path' | 'verb'
>;

export const useEntityConfigCreate = (props: UseEntityConfigCreateProps) =>
  useMutate<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>(
    'POST',
    `/api/services/app/EntityConfig/Create`,
    props
  );

export type entityConfigCreateProps = Omit<
  RestfulShesha.MutateProps<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>,
  'data'
>;
export const entityConfigCreate = (data: EntityConfigDto, props: entityConfigCreateProps) =>
  RestfulShesha.mutate<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>(
    'POST',
    `/api/services/app/EntityConfig/Create`,
    data,
    props
  );

export type EntityConfigUpdateProps = Omit<
  MutateProps<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>,
  'path' | 'verb'
>;

export const EntityConfigUpdate = (props: EntityConfigUpdateProps) => (
  <Mutate<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>
    verb="PUT"
    path={`/api/services/app/EntityConfig/Update`}
    {...props}
  />
);

export type UseEntityConfigUpdateProps = Omit<
  UseMutateProps<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>,
  'path' | 'verb'
>;

export const useEntityConfigUpdate = (props: UseEntityConfigUpdateProps) =>
  useMutate<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>(
    'PUT',
    `/api/services/app/EntityConfig/Update`,
    props
  );

export type entityConfigUpdateProps = Omit<
  RestfulShesha.MutateProps<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>,
  'data'
>;
export const entityConfigUpdate = (data: EntityConfigDto, props: entityConfigUpdateProps) =>
  RestfulShesha.mutate<EntityConfigDtoAjaxResponse, AjaxResponseBase, void, EntityConfigDto, void>(
    'PUT',
    `/api/services/app/EntityConfig/Update`,
    data,
    props
  );

export interface EntityConfigDeleteQueryParams {
  id?: string;
}

export type EntityConfigDeleteProps = Omit<
  MutateProps<void, unknown, EntityConfigDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const EntityConfigDelete = (props: EntityConfigDeleteProps) => (
  <Mutate<void, unknown, EntityConfigDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/app/EntityConfig/Delete`}
    {...props}
  />
);

export type UseEntityConfigDeleteProps = Omit<
  UseMutateProps<void, unknown, EntityConfigDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useEntityConfigDelete = (props: UseEntityConfigDeleteProps) =>
  useMutate<void, unknown, EntityConfigDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/app/EntityConfig/Delete`,
    { ...props }
  );

export type entityConfigDeleteProps = Omit<
  RestfulShesha.MutateProps<void, unknown, EntityConfigDeleteQueryParams, void, void>,
  'data'
>;
export const entityConfigDelete = (props: entityConfigDeleteProps) =>
  RestfulShesha.mutate<void, unknown, EntityConfigDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/app/EntityConfig/Delete`,
    undefined,
    props
  );

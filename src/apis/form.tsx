/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

/**
 * Form DTO
 */
export interface FormDto {
  id?: string;
  /**
   * Form path/id is used to identify a form
   */
  path?: string | null;
  /**
   * Form name
   */
  name?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Form markup (components) in JSON format
   */
  markup?: string | null;
  /**
   * Type of the form model
   */
  modelType?: string | null;
  /**
   * Type
   */
  type?: string | null;
}

export interface FormDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: FormDto;
}

export interface FormDtoPagedResultDto {
  items?: FormDto[] | null;
  totalCount?: number;
}

export interface FormDtoPagedResultDtoAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: FormDtoPagedResultDto;
}

export interface FormGraphQLDataResult {
  contentType?: string | null;
  serializerSettings?: {} | null;
  statusCode?: number | null;
  value?: {} | null;
}

export interface FormGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: FormGraphQLDataResult;
}

export interface FormPagedResultDtoGraphQLDataResult {
  contentType?: string | null;
  serializerSettings?: {} | null;
  statusCode?: number | null;
  value?: {} | null;
}

export interface FormPagedResultDtoGraphQLDataResultAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: FormPagedResultDtoGraphQLDataResult;
}

/**
 * Form update markup input
 */
export interface FormUpdateMarkupInput {
  id?: string;
  /**
   * Form markup (components) in JSON format
   */
  markup?: string | null;
}

/**
 * Input that is used to fetch entity data dynamically
 */
export interface GuidGetDynamicEntityInput {
  id?: string;
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string | null;
}

/**
 * Filtered, pages and sorted request DTO with properties list
 */
export interface PropsFilteredPagedAndSortedResultRequestDto {
  maxResultCount?: number;
  skipCount?: number;
  sorting?: string | null;
  /**
   * Filter string in JsonLogic format
   */
  filter?: string | null;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string | null;
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface FormGetByPathQueryParams {
  path?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormGetByPathProps = Omit<
  GetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>,
  'path'
>;

export const FormGetByPath = (props: FormGetByPathProps) => (
  <Get<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>
    path={`/api/services/Shesha/Form/GetByPath`}
    {...props}
  />
);

export type UseFormGetByPathProps = Omit<
  UseGetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>,
  'path'
>;

export const useFormGetByPath = (props: UseFormGetByPathProps) =>
  useGet<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>(
    `/api/services/Shesha/Form/GetByPath`,
    props
  );

export type formGetByPathProps = Omit<
  RestfulShesha.GetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>,
  'queryParams'
>;
export const formGetByPath = (queryParams: FormGetByPathQueryParams, props: formGetByPathProps) =>
  RestfulShesha.get<FormDtoAjaxResponse, AjaxResponseBase, FormGetByPathQueryParams, void>(
    `/api/services/Shesha/Form/GetByPath`,
    queryParams,
    props
  );

export interface FormUpdateMarkupQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormUpdateMarkupProps = Omit<
  MutateProps<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, void>,
  'path' | 'verb'
>;

export const FormUpdateMarkup = (props: FormUpdateMarkupProps) => (
  <Mutate<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, void>
    verb="PUT"
    path={`/api/services/Shesha/Form/UpdateMarkup`}
    {...props}
  />
);

export type UseFormUpdateMarkupProps = Omit<
  UseMutateProps<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, void>,
  'path' | 'verb'
>;

export const useFormUpdateMarkup = (props: UseFormUpdateMarkupProps) =>
  useMutate<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, void>(
    'PUT',
    `/api/services/Shesha/Form/UpdateMarkup`,
    props
  );

export type formUpdateMarkupProps = Omit<
  RestfulShesha.MutateProps<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, void>,
  'data'
>;
export const formUpdateMarkup = (data: FormUpdateMarkupInput, props: formUpdateMarkupProps) =>
  RestfulShesha.mutate<void, unknown, FormUpdateMarkupQueryParams, FormUpdateMarkupInput, void>(
    'PUT',
    `/api/services/Shesha/Form/UpdateMarkup`,
    data,
    props
  );

export interface FormGetAllQueryParams {
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormGetAllProps = Omit<
  GetProps<FormDtoPagedResultDtoAjaxResponse, AjaxResponseBase, FormGetAllQueryParams, void>,
  'path'
>;

export const FormGetAll = (props: FormGetAllProps) => (
  <Get<FormDtoPagedResultDtoAjaxResponse, AjaxResponseBase, FormGetAllQueryParams, void>
    path={`/api/services/Shesha/Form/GetAll`}
    {...props}
  />
);

export type UseFormGetAllProps = Omit<
  UseGetProps<FormDtoPagedResultDtoAjaxResponse, AjaxResponseBase, FormGetAllQueryParams, void>,
  'path'
>;

export const useFormGetAll = (props: UseFormGetAllProps) =>
  useGet<FormDtoPagedResultDtoAjaxResponse, AjaxResponseBase, FormGetAllQueryParams, void>(
    `/api/services/Shesha/Form/GetAll`,
    props
  );

export type formGetAllProps = Omit<
  RestfulShesha.GetProps<FormDtoPagedResultDtoAjaxResponse, AjaxResponseBase, FormGetAllQueryParams, void>,
  'queryParams'
>;
export const formGetAll = (queryParams: FormGetAllQueryParams, props: formGetAllProps) =>
  RestfulShesha.get<FormDtoPagedResultDtoAjaxResponse, AjaxResponseBase, FormGetAllQueryParams, void>(
    `/api/services/Shesha/Form/GetAll`,
    queryParams,
    props
  );

export interface FormQueryQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormQueryProps = Omit<
  MutateProps<
    FormGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormQueryQueryParams,
    GuidGetDynamicEntityInput,
    void
  >,
  'path' | 'verb'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const FormQuery = (props: FormQueryProps) => (
  <Mutate<FormGraphQLDataResultAjaxResponse, AjaxResponseBase, FormQueryQueryParams, GuidGetDynamicEntityInput, void>
    verb="POST"
    path={`/api/services/Shesha/Form/Query`}
    {...props}
  />
);

export type UseFormQueryProps = Omit<
  UseMutateProps<
    FormGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormQueryQueryParams,
    GuidGetDynamicEntityInput,
    void
  >,
  'path' | 'verb'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const useFormQuery = (props: UseFormQueryProps) =>
  useMutate<FormGraphQLDataResultAjaxResponse, AjaxResponseBase, FormQueryQueryParams, GuidGetDynamicEntityInput, void>(
    'POST',
    `/api/services/Shesha/Form/Query`,
    props
  );

export type formQueryProps = Omit<
  RestfulShesha.MutateProps<
    FormGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormQueryQueryParams,
    GuidGetDynamicEntityInput,
    void
  >,
  'data'
>;
/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const formQuery = (data: GuidGetDynamicEntityInput, props: formQueryProps) =>
  RestfulShesha.mutate<
    FormGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormQueryQueryParams,
    GuidGetDynamicEntityInput,
    void
  >('POST', `/api/services/Shesha/Form/Query`, data, props);

export interface FormQueryAllQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormQueryAllProps = Omit<
  MutateProps<
    FormPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormQueryAllQueryParams,
    PropsFilteredPagedAndSortedResultRequestDto,
    void
  >,
  'path' | 'verb'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const FormQueryAll = (props: FormQueryAllProps) => (
  <Mutate<
    FormPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormQueryAllQueryParams,
    PropsFilteredPagedAndSortedResultRequestDto,
    void
  >
    verb="POST"
    path={`/api/services/Shesha/Form/QueryAll`}
    {...props}
  />
);

export type UseFormQueryAllProps = Omit<
  UseMutateProps<
    FormPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormQueryAllQueryParams,
    PropsFilteredPagedAndSortedResultRequestDto,
    void
  >,
  'path' | 'verb'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const useFormQueryAll = (props: UseFormQueryAllProps) =>
  useMutate<
    FormPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormQueryAllQueryParams,
    PropsFilteredPagedAndSortedResultRequestDto,
    void
  >('POST', `/api/services/Shesha/Form/QueryAll`, props);

export type formQueryAllProps = Omit<
  RestfulShesha.MutateProps<
    FormPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormQueryAllQueryParams,
    PropsFilteredPagedAndSortedResultRequestDto,
    void
  >,
  'data'
>;
/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const formQueryAll = (data: PropsFilteredPagedAndSortedResultRequestDto, props: formQueryAllProps) =>
  RestfulShesha.mutate<
    FormPagedResultDtoGraphQLDataResultAjaxResponse,
    AjaxResponseBase,
    FormQueryAllQueryParams,
    PropsFilteredPagedAndSortedResultRequestDto,
    void
  >('POST', `/api/services/Shesha/Form/QueryAll`, data, props);

export interface FormGetQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormGetProps = Omit<GetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, void>, 'path'>;

export const FormGet = (props: FormGetProps) => (
  <Get<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, void>
    path={`/api/services/Shesha/Form/Get`}
    {...props}
  />
);

export type UseFormGetProps = Omit<
  UseGetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, void>,
  'path'
>;

export const useFormGet = (props: UseFormGetProps) =>
  useGet<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, void>(`/api/services/Shesha/Form/Get`, props);

export type formGetProps = Omit<
  RestfulShesha.GetProps<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, void>,
  'queryParams'
>;
export const formGet = (queryParams: FormGetQueryParams, props: formGetProps) =>
  RestfulShesha.get<FormDtoAjaxResponse, AjaxResponseBase, FormGetQueryParams, void>(
    `/api/services/Shesha/Form/Get`,
    queryParams,
    props
  );

export interface FormCreateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormCreateProps = Omit<
  MutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>,
  'path' | 'verb'
>;

export const FormCreate = (props: FormCreateProps) => (
  <Mutate<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>
    verb="POST"
    path={`/api/services/Shesha/Form/Create`}
    {...props}
  />
);

export type UseFormCreateProps = Omit<
  UseMutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>,
  'path' | 'verb'
>;

export const useFormCreate = (props: UseFormCreateProps) =>
  useMutate<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>(
    'POST',
    `/api/services/Shesha/Form/Create`,
    props
  );

export type formCreateProps = Omit<
  RestfulShesha.MutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>,
  'data'
>;
export const formCreate = (data: FormDto, props: formCreateProps) =>
  RestfulShesha.mutate<FormDtoAjaxResponse, AjaxResponseBase, FormCreateQueryParams, FormDto, void>(
    'POST',
    `/api/services/Shesha/Form/Create`,
    data,
    props
  );

export interface FormUpdateQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormUpdateProps = Omit<
  MutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>,
  'path' | 'verb'
>;

export const FormUpdate = (props: FormUpdateProps) => (
  <Mutate<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>
    verb="PUT"
    path={`/api/services/Shesha/Form/Update`}
    {...props}
  />
);

export type UseFormUpdateProps = Omit<
  UseMutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>,
  'path' | 'verb'
>;

export const useFormUpdate = (props: UseFormUpdateProps) =>
  useMutate<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>(
    'PUT',
    `/api/services/Shesha/Form/Update`,
    props
  );

export type formUpdateProps = Omit<
  RestfulShesha.MutateProps<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>,
  'data'
>;
export const formUpdate = (data: FormDto, props: formUpdateProps) =>
  RestfulShesha.mutate<FormDtoAjaxResponse, AjaxResponseBase, FormUpdateQueryParams, FormDto, void>(
    'PUT',
    `/api/services/Shesha/Form/Update`,
    data,
    props
  );

export interface FormDeleteQueryParams {
  id?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type FormDeleteProps = Omit<MutateProps<void, unknown, FormDeleteQueryParams, void, void>, 'path' | 'verb'>;

export const FormDelete = (props: FormDeleteProps) => (
  <Mutate<void, unknown, FormDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/Shesha/Form/Delete`}
    {...props}
  />
);

export type UseFormDeleteProps = Omit<
  UseMutateProps<void, unknown, FormDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useFormDelete = (props: UseFormDeleteProps) =>
  useMutate<void, unknown, FormDeleteQueryParams, void, void>('DELETE', `/api/services/Shesha/Form/Delete`, {
    ...props,
  });

export type formDeleteProps = Omit<RestfulShesha.MutateProps<void, unknown, FormDeleteQueryParams, void, void>, 'data'>;
export const formDelete = (props: formDeleteProps) =>
  RestfulShesha.mutate<void, unknown, FormDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/Shesha/Form/Delete`,
    undefined,
    props
  );

/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
/**
 * Status of the Shesha.Domain.ConfigurationItems.ConfigurationItem
 */
export type ConfigurationItemVersionStatus = 1 | 2 | 3 | 4 | 5;

/**
 * Form configuration DTO
 */
export interface FormConfigurationDto {
  id?: string;
  /**
   * Form path/id is used to identify a form
   */
  moduleId?: string | null;
  /**
   * Form name
   */
  name?: string | null;
  /**
   * Label
   */
  label?: string | null;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Markup in JSON format
   */
  markup?: string | null;
  /**
   * Type of the form model
   */
  modelType?: string | null;
  /**
   * Version number
   */
  versionNo?: number;
  versionStatus?: ConfigurationItemVersionStatus;
}

/**
 * Form update markup input
 */
export interface FormUpdateMarkupInput {
  id?: string;
  /**
   * Form markup (components) in JSON format
   */
  markup?: string | null;
}

export interface GuidEntityDto {
  id?: string;
}

export interface GuidEntityDtoPagedResultDto {
  items?: GuidEntityDto[] | null;
  totalCount?: number;
}

export interface FormConfigurationGetByNameQueryParams {
  /**
   * Module name
   */
  module?: string;
  /**
   * Form name
   */
  name?: string;
  /**
   * Form version number. Last published form is used when missing
   */
  version?: number;
  'api-version'?: string;
}

export type FormConfigurationGetByNameProps = Omit<
  GetProps<FormConfigurationDto, unknown, FormConfigurationGetByNameQueryParams, void>,
  'path'
>;

/**
 * Get current form configuration by name
 */
export const FormConfigurationGetByName = (props: FormConfigurationGetByNameProps) => (
  <Get<FormConfigurationDto, unknown, FormConfigurationGetByNameQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/GetByName`}
    {...props}
  />
);

export type UseFormConfigurationGetByNameProps = Omit<
  UseGetProps<FormConfigurationDto, unknown, FormConfigurationGetByNameQueryParams, void>,
  'path'
>;

/**
 * Get current form configuration by name
 */
export const useFormConfigurationGetByName = (props: UseFormConfigurationGetByNameProps) =>
  useGet<FormConfigurationDto, unknown, FormConfigurationGetByNameQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/GetByName`,
    props
  );

export type formConfigurationGetByNameProps = Omit<
  RestfulShesha.GetProps<FormConfigurationDto, unknown, FormConfigurationGetByNameQueryParams, void>,
  'queryParams'
>;
/**
 * Get current form configuration by name
 */
export const formConfigurationGetByName = (
  queryParams: FormConfigurationGetByNameQueryParams,
  props: formConfigurationGetByNameProps
) =>
  RestfulShesha.get<FormConfigurationDto, unknown, FormConfigurationGetByNameQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/GetByName`,
    queryParams,
    props
  );

export interface FormConfigurationUpdateMarkupQueryParams {
  'api-version'?: string;
}

export type FormConfigurationUpdateMarkupProps = Omit<
  MutateProps<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>,
  'path' | 'verb'
>;

/**
 * Update form markup
 */
export const FormConfigurationUpdateMarkup = (props: FormConfigurationUpdateMarkupProps) => (
  <Mutate<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>
    verb="PUT"
    path={`/api/services/Shesha/FormConfiguration/UpdateMarkup`}
    {...props}
  />
);

export type UseFormConfigurationUpdateMarkupProps = Omit<
  UseMutateProps<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>,
  'path' | 'verb'
>;

/**
 * Update form markup
 */
export const useFormConfigurationUpdateMarkup = (props: UseFormConfigurationUpdateMarkupProps) =>
  useMutate<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>(
    'PUT',
    `/api/services/Shesha/FormConfiguration/UpdateMarkup`,
    props
  );

export type formConfigurationUpdateMarkupProps = Omit<
  RestfulShesha.MutateProps<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>,
  'data'
>;
/**
 * Update form markup
 */
export const formConfigurationUpdateMarkup = (data: FormUpdateMarkupInput, props: formConfigurationUpdateMarkupProps) =>
  RestfulShesha.mutate<void, unknown, FormConfigurationUpdateMarkupQueryParams, FormUpdateMarkupInput, void>(
    'PUT',
    `/api/services/Shesha/FormConfiguration/UpdateMarkup`,
    data,
    props
  );

export interface FormConfigurationExportQueryParams {
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  'api-version'?: string;
}

export type FormConfigurationExportProps = Omit<
  GetProps<void, unknown, FormConfigurationExportQueryParams, void>,
  'path'
>;

/**
 * Export form
 */
export const FormConfigurationExport = (props: FormConfigurationExportProps) => (
  <Get<void, unknown, FormConfigurationExportQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/Export`}
    {...props}
  />
);

export type UseFormConfigurationExportProps = Omit<
  UseGetProps<void, unknown, FormConfigurationExportQueryParams, void>,
  'path'
>;

/**
 * Export form
 */
export const useFormConfigurationExport = (props: UseFormConfigurationExportProps) =>
  useGet<void, unknown, FormConfigurationExportQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/Export`,
    props
  );

export type formConfigurationExportProps = Omit<
  RestfulShesha.GetProps<void, unknown, FormConfigurationExportQueryParams, void>,
  'queryParams'
>;
/**
 * Export form
 */
export const formConfigurationExport = (
  queryParams: FormConfigurationExportQueryParams,
  props: formConfigurationExportProps
) =>
  RestfulShesha.get<void, unknown, FormConfigurationExportQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/Export`,
    queryParams,
    props
  );

export interface FormConfigurationGetAllQueryParams {
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  'api-version'?: string;
}

export type FormConfigurationGetAllProps = Omit<
  GetProps<GuidEntityDtoPagedResultDto, unknown, FormConfigurationGetAllQueryParams, void>,
  'path'
>;

export const FormConfigurationGetAll = (props: FormConfigurationGetAllProps) => (
  <Get<GuidEntityDtoPagedResultDto, unknown, FormConfigurationGetAllQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/GetAll`}
    {...props}
  />
);

export type UseFormConfigurationGetAllProps = Omit<
  UseGetProps<GuidEntityDtoPagedResultDto, unknown, FormConfigurationGetAllQueryParams, void>,
  'path'
>;

export const useFormConfigurationGetAll = (props: UseFormConfigurationGetAllProps) =>
  useGet<GuidEntityDtoPagedResultDto, unknown, FormConfigurationGetAllQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/GetAll`,
    props
  );

export type formConfigurationGetAllProps = Omit<
  RestfulShesha.GetProps<GuidEntityDtoPagedResultDto, unknown, FormConfigurationGetAllQueryParams, void>,
  'queryParams'
>;
export const formConfigurationGetAll = (
  queryParams: FormConfigurationGetAllQueryParams,
  props: formConfigurationGetAllProps
) =>
  RestfulShesha.get<GuidEntityDtoPagedResultDto, unknown, FormConfigurationGetAllQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/GetAll`,
    queryParams,
    props
  );

export interface FormConfigurationQueryQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  id?: string;
  'api-version'?: string;
}

export type FormConfigurationQueryProps = Omit<
  GetProps<void, unknown, FormConfigurationQueryQueryParams, void>,
  'path'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const FormConfigurationQuery = (props: FormConfigurationQueryProps) => (
  <Get<void, unknown, FormConfigurationQueryQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/Query`}
    {...props}
  />
);

export type UseFormConfigurationQueryProps = Omit<
  UseGetProps<void, unknown, FormConfigurationQueryQueryParams, void>,
  'path'
>;

/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const useFormConfigurationQuery = (props: UseFormConfigurationQueryProps) =>
  useGet<void, unknown, FormConfigurationQueryQueryParams, void>(`/api/services/Shesha/FormConfiguration/Query`, props);

export type formConfigurationQueryProps = Omit<
  RestfulShesha.GetProps<void, unknown, FormConfigurationQueryQueryParams, void>,
  'queryParams'
>;
/**
 * Query entity data.
 * NOTE: don't use on prod, will be merged with the `Get`endpoint soon
 */
export const formConfigurationQuery = (
  queryParams: FormConfigurationQueryQueryParams,
  props: formConfigurationQueryProps
) =>
  RestfulShesha.get<void, unknown, FormConfigurationQueryQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/Query`,
    queryParams,
    props
  );

export interface FormConfigurationQueryAllQueryParams {
  /**
   * List of properties to fetch in GraphQL-like syntax. Supports nested properties
   */
  properties?: string;
  /**
   * Filter string in JsonLogic format
   */
  filter?: string;
  /**
   * Quick search string. Is used to search entities by text
   */
  quickSearch?: string;
  sorting?: string;
  skipCount?: number;
  maxResultCount?: number;
  'api-version'?: string;
}

export type FormConfigurationQueryAllProps = Omit<
  GetProps<void, unknown, FormConfigurationQueryAllQueryParams, void>,
  'path'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const FormConfigurationQueryAll = (props: FormConfigurationQueryAllProps) => (
  <Get<void, unknown, FormConfigurationQueryAllQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/QueryAll`}
    {...props}
  />
);

export type UseFormConfigurationQueryAllProps = Omit<
  UseGetProps<void, unknown, FormConfigurationQueryAllQueryParams, void>,
  'path'
>;

/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const useFormConfigurationQueryAll = (props: UseFormConfigurationQueryAllProps) =>
  useGet<void, unknown, FormConfigurationQueryAllQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/QueryAll`,
    props
  );

export type formConfigurationQueryAllProps = Omit<
  RestfulShesha.GetProps<void, unknown, FormConfigurationQueryAllQueryParams, void>,
  'queryParams'
>;
/**
 * Query entities list
 * NOTE: don't use on prod, will be merged with the GetAll endpoint soon
 */
export const formConfigurationQueryAll = (
  queryParams: FormConfigurationQueryAllQueryParams,
  props: formConfigurationQueryAllProps
) =>
  RestfulShesha.get<void, unknown, FormConfigurationQueryAllQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/QueryAll`,
    queryParams,
    props
  );

export interface FormConfigurationGetQueryParams {
  id?: string;
  'api-version'?: string;
}

export type FormConfigurationGetProps = Omit<
  GetProps<GuidEntityDto, unknown, FormConfigurationGetQueryParams, void>,
  'path'
>;

export const FormConfigurationGet = (props: FormConfigurationGetProps) => (
  <Get<GuidEntityDto, unknown, FormConfigurationGetQueryParams, void>
    path={`/api/services/Shesha/FormConfiguration/Get`}
    {...props}
  />
);

export type UseFormConfigurationGetProps = Omit<
  UseGetProps<GuidEntityDto, unknown, FormConfigurationGetQueryParams, void>,
  'path'
>;

export const useFormConfigurationGet = (props: UseFormConfigurationGetProps) =>
  useGet<GuidEntityDto, unknown, FormConfigurationGetQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/Get`,
    props
  );

export type formConfigurationGetProps = Omit<
  RestfulShesha.GetProps<GuidEntityDto, unknown, FormConfigurationGetQueryParams, void>,
  'queryParams'
>;
export const formConfigurationGet = (queryParams: FormConfigurationGetQueryParams, props: formConfigurationGetProps) =>
  RestfulShesha.get<GuidEntityDto, unknown, FormConfigurationGetQueryParams, void>(
    `/api/services/Shesha/FormConfiguration/Get`,
    queryParams,
    props
  );

export interface FormConfigurationCreateQueryParams {
  'api-version'?: string;
}

export type FormConfigurationCreateProps = Omit<
  MutateProps<GuidEntityDto, unknown, FormConfigurationCreateQueryParams, GuidEntityDto, void>,
  'path' | 'verb'
>;

export const FormConfigurationCreate = (props: FormConfigurationCreateProps) => (
  <Mutate<GuidEntityDto, unknown, FormConfigurationCreateQueryParams, GuidEntityDto, void>
    verb="POST"
    path={`/api/services/Shesha/FormConfiguration/Create`}
    {...props}
  />
);

export type UseFormConfigurationCreateProps = Omit<
  UseMutateProps<GuidEntityDto, unknown, FormConfigurationCreateQueryParams, GuidEntityDto, void>,
  'path' | 'verb'
>;

export const useFormConfigurationCreate = (props: UseFormConfigurationCreateProps) =>
  useMutate<GuidEntityDto, unknown, FormConfigurationCreateQueryParams, GuidEntityDto, void>(
    'POST',
    `/api/services/Shesha/FormConfiguration/Create`,
    props
  );

export type formConfigurationCreateProps = Omit<
  RestfulShesha.MutateProps<GuidEntityDto, unknown, FormConfigurationCreateQueryParams, GuidEntityDto, void>,
  'data'
>;
export const formConfigurationCreate = (data: GuidEntityDto, props: formConfigurationCreateProps) =>
  RestfulShesha.mutate<GuidEntityDto, unknown, FormConfigurationCreateQueryParams, GuidEntityDto, void>(
    'POST',
    `/api/services/Shesha/FormConfiguration/Create`,
    data,
    props
  );

export interface FormConfigurationUpdateQueryParams {
  'api-version'?: string;
}

export type FormConfigurationUpdateProps = Omit<
  MutateProps<GuidEntityDto, unknown, FormConfigurationUpdateQueryParams, GuidEntityDto, void>,
  'path' | 'verb'
>;

export const FormConfigurationUpdate = (props: FormConfigurationUpdateProps) => (
  <Mutate<GuidEntityDto, unknown, FormConfigurationUpdateQueryParams, GuidEntityDto, void>
    verb="PUT"
    path={`/api/services/Shesha/FormConfiguration/Update`}
    {...props}
  />
);

export type UseFormConfigurationUpdateProps = Omit<
  UseMutateProps<GuidEntityDto, unknown, FormConfigurationUpdateQueryParams, GuidEntityDto, void>,
  'path' | 'verb'
>;

export const useFormConfigurationUpdate = (props: UseFormConfigurationUpdateProps) =>
  useMutate<GuidEntityDto, unknown, FormConfigurationUpdateQueryParams, GuidEntityDto, void>(
    'PUT',
    `/api/services/Shesha/FormConfiguration/Update`,
    props
  );

export type formConfigurationUpdateProps = Omit<
  RestfulShesha.MutateProps<GuidEntityDto, unknown, FormConfigurationUpdateQueryParams, GuidEntityDto, void>,
  'data'
>;
export const formConfigurationUpdate = (data: GuidEntityDto, props: formConfigurationUpdateProps) =>
  RestfulShesha.mutate<GuidEntityDto, unknown, FormConfigurationUpdateQueryParams, GuidEntityDto, void>(
    'PUT',
    `/api/services/Shesha/FormConfiguration/Update`,
    data,
    props
  );

export interface FormConfigurationDeleteQueryParams {
  id?: string;
  'api-version'?: string;
}

export type FormConfigurationDeleteProps = Omit<
  MutateProps<void, unknown, FormConfigurationDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const FormConfigurationDelete = (props: FormConfigurationDeleteProps) => (
  <Mutate<void, unknown, FormConfigurationDeleteQueryParams, void, void>
    verb="DELETE"
    path={`/api/services/Shesha/FormConfiguration/Delete`}
    {...props}
  />
);

export type UseFormConfigurationDeleteProps = Omit<
  UseMutateProps<void, unknown, FormConfigurationDeleteQueryParams, void, void>,
  'path' | 'verb'
>;

export const useFormConfigurationDelete = (props: UseFormConfigurationDeleteProps) =>
  useMutate<void, unknown, FormConfigurationDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/Shesha/FormConfiguration/Delete`,
    { ...props }
  );

export type formConfigurationDeleteProps = Omit<
  RestfulShesha.MutateProps<void, unknown, FormConfigurationDeleteQueryParams, void, void>,
  'data'
>;
export const formConfigurationDelete = (props: formConfigurationDeleteProps) =>
  RestfulShesha.mutate<void, unknown, FormConfigurationDeleteQueryParams, void, void>(
    'DELETE',
    `/api/services/Shesha/FormConfiguration/Delete`,
    undefined,
    props
  );
